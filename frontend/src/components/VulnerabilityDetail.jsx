import React, { useEffect, useState } from 'react';
import { useParams, Link } from 'react-router-dom';
import ReactMarkdown from "react-markdown";
import { getVulnerability, runAIAssessment, runOllamaAIAssessment } from '../services/api';
import VulnerabilityReport from './VulnerabilityReport';
import remarkGfm from 'remark-gfm'; // For GitHub Flavored Markdown

const VulnerabilityDetail = () => {
  const { id } = useParams();
  const [vulnerability, setVulnerability] = useState(null);
  const [loading, setLoading] = useState(true);
  const [assessing, setAssessing] = useState(false);
  const [assessment, setAssessment] = useState(null);
  const [assessmentOllama, setOllamaAssessment] = useState(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const data = await getVulnerability(id);
        setVulnerability(data);
      } catch (error) {
        console.error('Error fetching vulnerability:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [id]);

  const handleRunAssessment = async (e) => {
    setAssessing(true);
    try {
      // const result = await runAIAssessment(id);
      const ollama_result = await runOllamaAIAssessment(id)
      // setAssessment(result.assessment);
      setOllamaAssessment(ollama_result);
      console.log(`Ollama Result ${assessmentOllama}`)
      const updatedVuln = await getVulnerability(id);
      setVulnerability(updatedVuln);
    } catch (error) {
      console.error('Error running assessment:', error);
    } finally {
      setAssessing(false);
    }
  };

  if (loading) return <div className="loading">Loading vulnerability details...</div>;
  if (!vulnerability) return <div>Vulnerability not found</div>;

  return (
    <>
      <div className="vulnerability-detail">
        <Link to="/" className="back-link">‚Üê Back to Dashboard</Link>

        <h1>{vulnerability.title}</h1>

        <div className="detail-grid">
          <div className="detail-section">
            <h2>Basic Information</h2>
            <p><strong>CVE ID:</strong> {vulnerability.cve_id || 'N/A'}</p>
            <p><strong>DB ID:</strong> {vulnerability.id}</p>
            <p><strong>Severity:</strong>{' '}
              <span className={`severity-badge ${vulnerability.severity.toLowerCase()}`}>
                {vulnerability.severity}
              </span>
            </p>
            <p><strong>Date Reported:</strong> {new Date(vulnerability.date_reported).toLocaleString()}</p>
          </div>

          <div className="detail-section">
            <h2>Description</h2>
            <p>{vulnerability.description}</p>
          </div>
          <div className="detail-section">
            <h2>AI Assessment</h2>
            <button
              onClick={handleRunAssessment}
              disabled={assessing}
              className="ai-button"
            >
              {assessing ? 'Analyzing...' : 'Re-Run AI Assessment'}
            </button>
          </div>
        </div>
      </div>
      {(vulnerability.ai_assessment !== null) ?
        <VulnerabilityReport vuln_data={vulnerability} /> : ''
      }
      {(vulnerability.ai_ollama_assessment !== null) ?
        <section className='recommendations-section'>
          <ReactMarkdown remarkPlugins={[remarkGfm]}>{vulnerability.ai_ollama_assessment}</ReactMarkdown>
        </section>
        : ''
      }
    </>
  );
};

export default VulnerabilityDetail;
